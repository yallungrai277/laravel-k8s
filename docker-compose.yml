version: "3"
services:
    # Cli not needed really, but it has composer binary over on to run composer commands.
    cli:
        build:
            context: .
            target: cli
        image: laravel-k8s/cli
        entrypoint: ["tail", "-f", "/dev/null"] # Keeps the interactive shell alive.
        volumes:
            - ".:/var/www/html"
        networks:
            - laravel-k8s
    # App
    fpm:
        build:
            context: .
            target: fpm_server
        image: laravel-k8s/fpm_server
        environment:
            APP_DEBUG: "true"
        volumes:
            - ".:/var/www/html"
        networks:
            - laravel-k8s

    web:
        build:
            context: .
            target: web_server
        image: laravel-k8s/web_server
        restart: unless-stopped
        ports:
            - "80:80"
        volumes:
            - "./public:/var/www/html/public"
            - "./storage/app:/var/www/html/storage/app" # For images and uploads.
            - "./docker/nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template" # For nginx configs, Requires a full build of image on change if not specified here.
        networks:
            - laravel-k8s

    cron:
        build:
            context: .
            target: cron
        image: laravel-k8s/cron
        volumes:
            - ".:/var/www/html"
        networks:
            - laravel-k8s

    frontend:
        build:
            context: .
            target: frontend
        command: ["/bin/sh", "-c", "npm install && npm run dev"]
        restart: unless-stopped
        image: laravel-k8s/frontend
        ports:
            - 5173:5173
        volumes:
            - ".:/var/www/html"
            # Add node_modules as singular volume.
            # This prevents our local node_modules from being propagated into the container,
            # So the node_modules can be compiled for each of the different architectures.
            - "/var/www/html/node_modules"
        networks:
            - laravel-k8s

    redis:
        image: redis:6.0.20-alpine
        restart: unless-stopped
        ports:
            - ${REDIS_PORT:-6379}:6379
        volumes:
            - "redis:/data"
        networks:
            - laravel-k8s
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            retries: 3
            timeout: 5s

    mysql:
        image: mariadb:10.11.4
        restart: unless-stopped
        ports:
            - ${DB_PORT:-3306}:3306
        environment:
            - MARIADB_USER=${DB_USERNAME}
            - MARIADB_PASSWORD=${DB_PASSWORD}
            - MARIADB_DATABASE=${DB_DATABASE}
            - MARIADB_ROOT_PASSWORD=root
        volumes:
            - "mariadb:/var/lib/mysql"
        networks:
            - laravel-k8s
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
            retries: 3
            timeout: 5s

    mysql-tests:
        image: mariadb:10.11.4
        tmpfs: /var/lib/mysql
        restart: unless-stopped
        ports:
            - 3306
        environment:
            - MARIADB_USER=${DB_USERNAME}
            - MARIADB_PASSWORD=${DB_PASSWORD}
            - MARIADB_DATABASE=${DB_DATABASE}
            - MARIADB_ROOT_PASSWORD=root
        networks:
            - laravel-k8s
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD}"]
            retries: 3
            timeout: 5s

    mailhog:
        image: mailhog/mailhog:v1.0.1
        ports:
            - "${MAIL_PORT}:8025"
        networks:
            - laravel-k8s

    pma:
        image: phpmyadmin:5.2
        depends_on:
            - mysql
        ports:
            - 8080:80
        environment:
            - PMA_HOST=mysql
            - PMA_PORT=3306
            - PMA_USER=${DB_USERNAME}
            - PMA_PASSWORD=${DB_PASSWORD}
        networks:
            - laravel-k8s

volumes:
    redis:
    mariadb:
    mariadbtests:

networks:
    laravel-k8s:
